---
title: "Reproducible document"
author: "Anne Gaml-Sørensen"
format: html
---

Header tells Quarto about the format
you can add options like echos: false etc. to the header (YAML)

Here a header is marked by ## 
This can be visualized in the outline

## Basic of R

ctrl shift p: insert code chunk:
Markdown outside the brackets. 
Code inside.

```{r}
1 + 1
```
ctrl enter: runs the line

ctrl s: saving

The c() function puts values together 
and head() prints the first 6 rows

A vector is a set of items (a string)
A data frame is rows and columns (vectors put side by side)

## Setup code chunk

```{r setup}
#| message: false
#| warning: false
library(tidyverse)
library(tidyverse)
post_meal_data <- read_csv2(here::here("data/post-meal-insulin.csv"))
```

Here under setup you write import data and install packages, because this is the thing that is run first

### formating in Markdown
**bold**	bold
*italics*	italics
super^script^	superscript
sub~script~	subscript

 # Exercise 6.9
 
 Create one level 2 header (##) called “About me” below the setup code chunk.
Below this new level 2 header, insert a list (either numbered or unnumbered) with your name and affiliation(s)/institution(s).
Below the list, write one or two simple sentences about yourself. Include one word in bold and another in italics.
Create another level 2 header (##) called “Simple code”.
Insert a code chunk below this level 2 header that multiplies 3 * 3 and run it.


## About me

1. Anne Gaml-Sørensen
2. Department of Public Health
3. DK, Aarhus University

- Anne Gaml-Sørensen
- Department of Public Health
- DK, Aarhus University


I am very **bold**
I love *italian(cs)* food

## Simple code


```{r}
3 * 3
``` 

Commiting (in git): saving the work in a history (making a snapshot of a version of a file). This gives you transparency and you can see, who does what. 
Git: press 'commit' to open.

Pull (download) and push (opload) is used to communicate with github.

In commit message, you write what you oplaod or change

green: added
Red: text removed

## Testing for Git

I have commited something.
I dont know where git is now in the interface og R?
I have to open a project first (right corner above)

For Stata files, you can use the package haven to import those types of data files into R.

## Showing the data

```{r}
post_meal_data
```
```{r}
glimpse(post_meal_data)
```

use always the here::here() function
This makes the work reproducible 
Instead of setting the work directory

# Data cleaning

You can set and switch between long and wide format with tidy data

*importer statafiler

 #```{r}
# library(haven)
# read_dta("datanavn.dta")
# ```

lav plots og grafer med ggplot2 i stedet for r-pakken.
Kig på den gule boks: det er opsætningen af selve koden med options.
```{r}
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```


```{r}
#| fig-cap: "histogram BMI"
#| label: fig-bmi-histo
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```

@fig-bmi-histo

geom_point() and geom_smooth() ggplot2 styler 

## Exercise: discrete plots

```{r}
#| fig-cap: "glykemi"
#| label: fig-glykemi-bar
ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

@fig-glykemi-bar

here this way is nicer to look at:

```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = glykemi)) +
  geom_bar()
```

```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar()
```

### which kind of variables do I have

```{r}
class(post_meal_data$glykemi)
```
```{r}
class(post_meal_data$Group)
```
```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```
 
If you want help search
help (geom_bar) 

## Putting two plots side by side

```{r}
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```

```{r}
ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

```{r combines two plots}
#| label: fig-bmi-glykemi
#| fig-cap: "BMI and glykemi, side by side."
#| fig-subcap:
#|   - "Distribution of BMI."
#|   - "Number of those with glykemi"
#| layout-ncol: 2
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()

ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

```{r}
ggplot(post_meal_data, aes(x = glykemi, y = Group)) +
  geom_col()
```

## formatting

write in lower level cases with _ separating words
for example: learning_r

```{r}
post_meal_data |>
  mean(BMI)
```
```{r}
class(post_meal_data$BMI)
```
*if (x == 1) {
*y <- 2
*}

## PLotting two continous variables

The independent variable on the x-axis. 
The dependent variable on the y-axis. 

Options are:
post_meal_data |>
  geom_point()
  geom_hex()
  geom_smooth()

  
```{r}
#| fig-cap: "Scatterplot of BMI and the auc for glucose."
#| label: fig-bmi-auc-pg
ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point() +
  geom_smooth()
```

## Github is an online service (remote directory or repositpory) 

Make a password:

```{r}
usethis::create_github_token()
```

```{r}
usethis::gh_token_help()
```

